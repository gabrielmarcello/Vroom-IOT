[
    {
        "id": "fa80d255cf52b8a3",
        "type": "tab",
        "label": "Flow IoT LED API",
        "disabled": false,
        "info": ""
    },
    {
        "id": "885ba8b0927eafdf",
        "type": "mqtt in",
        "z": "fa80d255cf52b8a3",
        "name": "Status ESP32",
        "topic": "fiap/iot/led/status/esp32_001",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "mosquitto_public",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 350,
        "y": 200,
        "wires": [
            [
                "5196c6731644fd41"
            ]
        ]
    },
    {
        "id": "5196c6731644fd41",
        "type": "debug",
        "z": "fa80d255cf52b8a3",
        "name": "Status recebido",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 590,
        "y": 200,
        "wires": []
    },
    {
        "id": "2d04974a15de55eb",
        "type": "http in",
        "z": "fa80d255cf52b8a3",
        "name": "API mudar LED",
        "url": "/led",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 340,
        "y": 300,
        "wires": [
            [
                "fe05c98df3c6219d"
            ]
        ]
    },
    {
        "id": "fe05c98df3c6219d",
        "type": "function",
        "z": "fa80d255cf52b8a3",
        "name": "Montar JSON MQTT",
        "func": "let id_tag;\nlet color;\n\n// Se o Node-RED recebeu JSON bruto (string), converte\nif (typeof msg.payload === \"string\") {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Payload não é um JSON válido: \" + msg.payload);\n        return null;\n    }\n}\n\n// Agora tenta pegar os campos\nid_tag = msg.payload.idTag || msg.payload.id_tag || msg.payload.IdTag;\ncolor = msg.payload.color || msg.payload.Color;\n\n// Verifica\nif (id_tag === undefined) {\n    node.error(\"Campo idTag/id_tag não definido. Payload recebido: \" + JSON.stringify(msg.payload));\n    return null;\n}\n\n// Monta mensagem MQTT\nmsg.topic = `fiap/iot/led/control/esp32_${id_tag.toString().padStart(3, '0')}`;\nmsg.payload = { id_tag, color, led_on: true };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 300,
        "wires": [
            [
                "1fd53fa0ebbf18e3",
                "00f1cd1f35943e3e"
            ]
        ]
    },
    {
        "id": "1fd53fa0ebbf18e3",
        "type": "mqtt out",
        "z": "fa80d255cf52b8a3",
        "name": "Enviar comando para ESP32",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mosquitto_public",
        "x": 910,
        "y": 300,
        "wires": []
    },
    {
        "id": "00f1cd1f35943e3e",
        "type": "http response",
        "z": "fa80d255cf52b8a3",
        "name": "Retornar OK",
        "statusCode": "200",
        "headers": {},
        "x": 900,
        "y": 360,
        "wires": []
    },
    {
        "id": "mosquitto_public",
        "type": "mqtt-broker",
        "name": "Mosquitto Público",
        "broker": "test.mosquitto.org",
        "port": "1883",
        "clientid": "node_red_control",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "15",
        "cleansession": true
    }
]